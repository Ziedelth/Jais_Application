import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:jais/components/animes/anime_list.dart';
import 'package:jais/components/animes/anime_loader_widget.dart';
import 'package:jais/components/animes/anime_widget.dart';
import 'package:jais/mappers/anime_mapper.dart';

import 'const_test.dart';

void main() {
  TestWidgetsFlutterBinding.ensureInitialized();
  final animeMapper = AnimeMapper();
  const string =
      "";

  group('Test animes', () {
    test('Test transformation', () {
      final list = animeMapper.toWidgets(string);

      expect(list.length, animeMapper.limit);
      expect(list.whereType<AnimeWidget>().length, animeMapper.limit);
    });

    test('Test loading animes', () {
      expect(animeMapper.list.length, 0);
      animeMapper.addLoader();
      expect(animeMapper.list.length, animeMapper.limit);

      expect(
        animeMapper.list.whereType<AnimeLoaderWidget>().length,
        animeMapper.limit,
      );

      animeMapper.removeLoader();
      expect(animeMapper.list.length, 0);
    });

    testWidgets('Test anime widget on phone', (widgetTester) async {
      for (final size in phoneSizes) {
        await testOrientation(
          widgetTester,
          animeMapper,
          string,
          size.width,
          size.height,
        );
      }
    });

    testWidgets('Test anime widget on tablet', (widgetTester) async {
      for (final size in tabletSizes) {
        await testOrientation(
          widgetTester,
          animeMapper,
          string,
          size.width,
          size.height,
        );
      }
    });
  });
}

Future<void> testOrientation(
  WidgetTester widgetTester,
  AnimeMapper animeMapper,
  String string,
  double width,
  double height,
) async {
  await testWidget(
    widgetTester,
    animeMapper,
    string,
    Size(width, height),
  );
  await testWidget(
    widgetTester,
    animeMapper,
    string,
    Size(height, width),
  );
}

Future<void> testWidget(
  WidgetTester widgetTester,
  AnimeMapper animeMapper,
  String string,
  Size size,
) async {
  widgetTester.binding.window.devicePixelRatioTestValue = 1.0;
  widgetTester.binding.window.physicalSizeTestValue = size;

  final widgets = animeMapper.toWidgets(string);
  final list = widgets;

  await widgetTester.pumpWidget(
    MaterialApp(
      home: Scaffold(
        body: SingleChildScrollView(
          child: AnimeList(children: list),
        ),
      ),
    ),
  );

  expect(find.byType(AnimeWidget), findsWidgets);
}
